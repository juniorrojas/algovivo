#!/usr/bin/env python3
from pathlib import Path
import os
this_filepath = Path(os.path.abspath(__file__))
this_dirpath = this_filepath.parent
import sys
sys.path.insert(0, str(this_dirpath))
import shutil
import argparse
from datetime import datetime
from glob import glob

def clean_deploy_dir(deploy_path):
    # remove all existing files in deploy_path (from last deployment), except .git
    for filename in os.listdir(deploy_path):
        if filename == ".git":
            continue
        full_filename = deploy_path.joinpath(filename)
        if os.path.isdir(full_filename):
            shutil.rmtree(full_filename)
        else:
            os.remove(full_filename)

def transfer_dir(src_dirname, dst_dirname):
    gitignore_filename = os.path.join(src_dirname, ".gitignore")
    if os.path.exists(gitignore_filename):
        shutil.copy(
            gitignore_filename,
            os.path.join(dst_dirname, ".gitignore")
        )

    for filename in (
        glob(os.path.join(src_dirname, "*.html")) +
        glob(os.path.join(src_dirname, "*.css")) +
        glob(os.path.join(src_dirname, "*.js")) +
        glob(os.path.join(src_dirname, "*.wasm")) +
        glob(os.path.join(src_dirname, "*.json")) +
        glob(os.path.join(src_dirname, "*.svg")) 
    ):
        shutil.copy(
            filename,
            os.path.join(dst_dirname, os.path.basename(filename))
        )

    for dirname in os.listdir(src_dirname):
        if os.path.isdir(os.path.join(src_dirname, dirname)):
            os.makedirs(os.path.join(dst_dirname, dirname), exist_ok=True)
            transfer_dir(
                os.path.join(src_dirname, dirname),
                os.path.join(dst_dirname, dirname)
            )


def populate_deploy_path(deploy_dirname):
    public_dirname = str(this_dirpath.parent.joinpath("public"))
    transfer_dir(public_dirname, str(deploy_dirname))
    
    with open(deploy_path.joinpath("deploy_info.txt"), "w") as f:
        f.write(str(datetime.now().timestamp()))

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("--deploy-dirname", type=str, default=str(this_dirpath.parent.joinpath("deploy.out")))
    args = arg_parser.parse_args()

    os.makedirs(args.deploy_dirname, exist_ok=True)
    deploy_path = Path(args.deploy_dirname)
    clean_deploy_dir(deploy_path)
    populate_deploy_path(deploy_path)
    print(args.deploy_dirname)